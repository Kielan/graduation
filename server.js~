'use strict';
//module dependencies
var express = require('express');
var exphbs = require('express-handlebars');
var path = require('path');
var mongoose = require('mongoose');
var session = require('express-session');
var bodyParser = require('body-parser');
var app = express()

mongoose.connect('mongodb://localhost/thegraduate');

var graduateUserSchema = mongoose.Schema({
      _id: { type: String, lowercase: true, trim: true}
    , name: {first: String, last: String}
    , username: {type: String, required: true}
    , salt: {type: String, required: true}
    , hash: {type: String, required: true}
    , created: {type: Date, default: Date.now} 
});

var favBookSchema = mongoose.Schema({
    title: { type: String lowercase: true, trim: true, required: true}
    , author: { first: String, last: String, required: true}
    , quote: {type: String, required: true, lowercase: true}
});

mongoose.model('User', graduateUserSchema);

mongoose.model('Book', favBookSchema);

//routes
app.get('/', function (req, res) {
    res.render('index', {title: 'GraduateLogin'});
})

// view engine setup
app.engine('.hbs', exphbs({extname: '.hbs'}));
app.set('view engine', '.hbs');
app.set('views', path.join(__dirname, 'views'));

//not good for production but good enough for development and mantaining session
//data
//app.use(express.cookieParser());
app.use(session({secret: 'cat',
  resave: false,
  saveUninitialized: false,
  cookie: { secure: false }}));
app.use(bodyParser());

//making my own middleware to expose session information
//to the view for login data
app.use(function (req, res, next) {
    res.locals.session = req.session;
    next();
})

app.use(express.static(path.join(__dirname, 'asset')));

var server = app.listen(3000, function() {
    var host = server.address().address;
    var port = server.address().port;

  console.log('Example app listening at http://%s:%s', host, port)
})
